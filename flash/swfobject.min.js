var swfobject = function() {
    var aq = "undefined",
        aD = "object",
        ab = "Shockwave Flash",
        X = "ShockwaveFlash.ShockwaveFlash",
        aE = "application/x-shockwave-flash",
        ac = "SWFObjectExprInst",
        ax = "onreadystatechange",
        af = window,
        aL = document,
        aB = navigator,
        aa = false,
        Z = [aN],
        aG = [],
        ag = [],
        al = [],
        aJ, ad, ap, at, ak = false,
        aU = false,
        aH, an, aI = true,
        ah = function() {
            var a = typeof aL.getElementById != aq && typeof aL.getElementsByTagName != aq && typeof aL.createElement != aq,
                e = aB.userAgent.toLowerCase(),
                c = aB.platform.toLowerCase(),
                h = c ? /win/.test(c) : /win/.test(e),
                j = c ? /mac/.test(c) : /mac/.test(e),
                g = /webkit/.test(e) ? parseFloat(e.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false,
                d = !+"\v1",
                f = [0, 0, 0],
                k = null;
            if (typeof aB.plugins != aq && typeof aB.plugins[ab] == aD) {
                k = aB.plugins[ab].description;
                if (k && !(typeof aB.mimeTypes != aq && aB.mimeTypes[aE] && !aB.mimeTypes[aE].enabledPlugin)) {
                    aa = true;
                    d = false;
                    k = k.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
                    f[0] = parseInt(k.replace(/^(.*)\..*$/, "$1"), 10);
                    f[1] = parseInt(k.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
                    f[2] = /[a-zA-Z]/.test(k) ? parseInt(k.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0
                }
            } else {
                if (typeof af.ActiveXObject != aq) {
                    try {
                        var i = new ActiveXObject(X);
                        if (i) {
                            k = i.GetVariable("$version");
                            if (k) {
                                d = true;
                                k = k.split(" ")[1].split(",");
                                f = [parseInt(k[0], 10), parseInt(k[1], 10), parseInt(k[2], 10)]
                            }
                        }
                    } catch (b) {}
                }
            }
            return {
                w3: a,
                pv: f,
                wk: g,
                ie: d,
                win: h,
                mac: j
            }
        }(),
        aK = function() {
            if (!ah.w3) {
                return
            }
            if ((typeof aL.readyState != aq && aL.readyState == "complete") || (typeof aL.readyState == aq && (aL.getElementsByTagName("body")[0] || aL.body))) {
                aP()
            }
            if (!ak) {
                if (typeof aL.addEventListener != aq) {
                    aL.addEventListener("DOMContentLoaded", aP, false)
                }
                if (ah.ie && ah.win) {
                    aL.attachEvent(ax, function() {
                        if (aL.readyState == "complete") {
                            aL.detachEvent(ax, arguments.callee);
                            aP()
                        }
                    });
                    if (af == top) {
                        (function() {
                            if (ak) {
                                return
                            }
                            try {
                                aL.documentElement.doScroll("left")
                            } catch (a) {
                                setTimeout(arguments.callee, 0);
                                return
                            }
                            aP()
                        })()
                    }
                }
                if (ah.wk) {
                    (function() {
                        if (ak) {
                            return
                        }
                        if (!/loaded|complete/.test(aL.readyState)) {
                            setTimeout(arguments.callee, 0);
                            return
                        }
                        aP()
                    })()
                }
                aC(aP)
            }
        }();

    function aP() {
        if (ak) {
            return
        }
        try {
            var b = aL.getElementsByTagName("body")[0].appendChild(ar("span"));
            b.parentNode.removeChild(b)
        } catch (a) {
            return
        }
        ak = true;
        var d = Z.length;
        for (var c = 0; c < d; c++) {
            Z[c]()
        }
    }

    function aj(a) {
        if (ak) {
            a()
        } else {
            Z[Z.length] = a
        }
    }

    function aC(a) {
        if (typeof af.addEventListener != aq) {
            af.addEventListener("load", a, false)
        } else {
            if (typeof aL.addEventListener != aq) {
                aL.addEventListener("load", a, false)
            } else {
                if (typeof af.attachEvent != aq) {
                    aM(af, "onload", a)
                } else {
                    if (typeof af.onload == "function") {
                        var b = af.onload;
                        af.onload = function() {
                            b();
                            a()
                        }
                    } else {
                        af.onload = a
                    }
                }
            }
        }
    }

    function aN() {
        if (aa) {
            Y()
        } else {
            am()
        }
    }

    function Y() {
        var d = aL.getElementsByTagName("body")[0];
        var b = ar(aD);
        b.setAttribute("type", aE);
        var a = d.appendChild(b);
        if (a) {
            var c = 0;
            (function() {
                if (typeof a.GetVariable != aq) {
                    var e = a.GetVariable("$version");
                    if (e) {
                        e = e.split(" ")[1].split(",");
                        ah.pv = [parseInt(e[0], 10), parseInt(e[1], 10), parseInt(e[2], 10)]
                    }
                } else {
                    if (c < 10) {
                        c++;
                        setTimeout(arguments.callee, 10);
                        return
                    }
                }
                d.removeChild(b);
                a = null;
                am()
            })()
        } else {
            am()
        }
    }

    function am() {
        var g = aG.length;
        if (g > 0) {
            for (var h = 0; h < g; h++) {
                var c = aG[h].id;
                var l = aG[h].callbackFn;
                var a = {
                    success: false,
                    id: c
                };
                if (ah.pv[0] > 0) {
                    var i = aS(c);
                    if (i) {
                        if (ao(aG[h].swfVersion) && !(ah.wk && ah.wk < 312)) {
                            ay(c, true);
                            if (l) {
                                a.success = true;
                                a.ref = av(c);
                                l(a)
                            }
                        } else {
                            if (aG[h].expressInstall && au()) {
                                var e = {};
                                e.data = aG[h].expressInstall;
                                e.width = i.getAttribute("width") || "0";
                                e.height = i.getAttribute("height") || "0";
                                if (i.getAttribute("class")) {
                                    e.styleclass = i.getAttribute("class")
                                }
                                if (i.getAttribute("align")) {
                                    e.align = i.getAttribute("align")
                                }
                                var f = {};
                                var d = i.getElementsByTagName("param");
                                var k = d.length;
                                for (var j = 0; j < k; j++) {
                                    if (d[j].getAttribute("name").toLowerCase() != "movie") {
                                        f[d[j].getAttribute("name")] = d[j].getAttribute("value")
                                    }
                                }
                                ae(e, f, c, l)
                            } else {
                                aF(i);
                                if (l) {
                                    l(a)
                                }
                            }
                        }
                    }
                } else {
                    ay(c, true);
                    if (l) {
                        var b = av(c);
                        if (b && typeof b.SetVariable != aq) {
                            a.success = true;
                            a.ref = b
                        }
                        l(a)
                    }
                }
            }
        }
    }

    function av(b) {
        var d = null;
        var c = aS(b);
        if (c && c.nodeName == "OBJECT") {
            if (typeof c.SetVariable != aq) {
                d = c
            } else {
                var a = c.getElementsByTagName(aD)[0];
                if (a) {
                    d = a
                }
            }
        }
        return d
    }

    function au() {
        return !aU && ao("6.0.65") && (ah.win || ah.mac) && !(ah.wk && ah.wk < 312)
    }

    function ae(f, d, h, e) {
        aU = true;
        ap = e || null;
        at = {
            success: false,
            id: h
        };
        var a = aS(h);
        if (a) {
            if (a.nodeName == "OBJECT") {
                aJ = aO(a);
                ad = null
            } else {
                aJ = a;
                ad = h
            }
            f.id = ac;
            if (typeof f.width == aq || (!/%$/.test(f.width) && parseInt(f.width, 10) < 310)) {
                f.width = "310"
            }
            if (typeof f.height == aq || (!/%$/.test(f.height) && parseInt(f.height, 10) < 137)) {
                f.height = "137"
            }
            aL.title = aL.title.slice(0, 47) + " - Flash Player Installation";
            var b = ah.ie && ah.win ? "ActiveX" : "PlugIn",
                c = "MMredirectURL=" + af.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + b + "&MMdoctitle=" + aL.title;
            if (typeof d.flashvars != aq) {
                d.flashvars += "&" + c
            } else {
                d.flashvars = c
            }
            if (ah.ie && ah.win && a.readyState != 4) {
                var g = ar("div");
                h += "SWFObjectNew";
                g.setAttribute("id", h);
                a.parentNode.insertBefore(g, a);
                a.style.display = "none";
                (function() {
                    if (a.readyState == 4) {
                        a.parentNode.removeChild(a)
                    } else {
                        setTimeout(arguments.callee, 10)
                    }
                })()
            }
            aA(f, d, h)
        }
    }

    function aF(a) {
        if (ah.ie && ah.win && a.readyState != 4) {
            var b = ar("div");
            a.parentNode.insertBefore(b, a);
            b.parentNode.replaceChild(aO(a), b);
            a.style.display = "none";
            (function() {
                if (a.readyState == 4) {
                    a.parentNode.removeChild(a)
                } else {
                    setTimeout(arguments.callee, 10)
                }
            })()
        } else {
            a.parentNode.replaceChild(aO(a), a)
        }
    }

    function aO(b) {
        var d = ar("div");
        if (ah.win && ah.ie) {
            d.innerHTML = b.innerHTML
        } else {
            var e = b.getElementsByTagName(aD)[0];
            if (e) {
                var a = e.childNodes;
                if (a) {
                    var f = a.length;
                    for (var c = 0; c < f; c++) {
                        if (!(a[c].nodeType == 1 && a[c].nodeName == "PARAM") && !(a[c].nodeType == 8)) {
                            d.appendChild(a[c].cloneNode(true))
                        }
                    }
                }
            }
        }
        return d
    }

    function aA(e, g, c) {
        var d, a = aS(c);
        if (ah.wk && ah.wk < 312) {
            return d
        }
        if (a) {
            if (typeof e.id == aq) {
                e.id = c
            }
            if (ah.ie && ah.win) {
                var f = "";
                for (var i in e) {
                    if (e[i] != Object.prototype[i]) {
                        if (i.toLowerCase() == "data") {
                            g.movie = e[i]
                        } else {
                            if (i.toLowerCase() == "styleclass") {
                                f += ' class="' + e[i] + '"'
                            } else {
                                if (i.toLowerCase() != "classid") {
                                    f += " " + i + '="' + e[i] + '"'
                                }
                            }
                        }
                    }
                }
                var h = "";
                for (var j in g) {
                    if (g[j] != Object.prototype[j]) {
                        h += '<param name="' + j + '" value="' + g[j] + '" />'
                    }
                }
                a.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + f + ">" + h + "</object>";
                ag[ag.length] = e.id;
                d = aS(e.id)
            } else {
                var b = ar(aD);
                b.setAttribute("type", aE);
                for (var k in e) {
                    if (e[k] != Object.prototype[k]) {
                        if (k.toLowerCase() == "styleclass") {
                            b.setAttribute("class", e[k])
                        } else {
                            if (k.toLowerCase() != "classid") {
                                b.setAttribute(k, e[k])
                            }
                        }
                    }
                }
                for (var l in g) {
                    if (g[l] != Object.prototype[l] && l.toLowerCase() != "movie") {
                        aQ(b, l, g[l])
                    }
                }
                a.parentNode.replaceChild(b, a);
                d = b
            }
        }
        return d
    }

    function aQ(b, d, c) {
        var a = ar("param");
        a.setAttribute("name", d);
        a.setAttribute("value", c);
        b.appendChild(a)
    }

    function aw(a) {
        var b = aS(a);
        if (b && b.nodeName == "OBJECT") {
            if (ah.ie && ah.win) {
                b.style.display = "none";
                (function() {
                    if (b.readyState == 4) {
                        aT(a)
                    } else {
                        setTimeout(arguments.callee, 10)
                    }
                })()
            } else {
                b.parentNode.removeChild(b)
            }
        }
    }

    function aT(a) {
        var b = aS(a);
        if (b) {
            for (var c in b) {
                if (typeof b[c] == "function") {
                    b[c] = null
                }
            }
            b.parentNode.removeChild(b)
        }
    }

    function aS(a) {
        var c = null;
        try {
            c = aL.getElementById(a)
        } catch (b) {}
        return c
    }

    function ar(a) {
        return aL.createElement(a)
    }

    function aM(a, c, b) {
        a.attachEvent(c, b);
        al[al.length] = [a, c, b]
    }

    function ao(a) {
        var b = ah.pv,
            c = a.split(".");
        c[0] = parseInt(c[0], 10);
        c[1] = parseInt(c[1], 10) || 0;
        c[2] = parseInt(c[2], 10) || 0;
        return (b[0] > c[0] || (b[0] == c[0] && b[1] > c[1]) || (b[0] == c[0] && b[1] == c[1] && b[2] >= c[2])) ? true : false
    }

    function az(b, f, a, c) {
        if (ah.ie && ah.mac) {
            return
        }
        var e = aL.getElementsByTagName("head")[0];
        if (!e) {
            return
        }
        var g = (a && typeof a == "string") ? a : "screen";
        if (c) {
            aH = null;
            an = null
        }
        if (!aH || an != g) {
            var d = ar("style");
            d.setAttribute("type", "text/css");
            d.setAttribute("media", g);
            aH = e.appendChild(d);
            if (ah.ie && ah.win && typeof aL.styleSheets != aq && aL.styleSheets.length > 0) {
                aH = aL.styleSheets[aL.styleSheets.length - 1]
            }
            an = g
        }
        if (ah.ie && ah.win) {
            if (aH && typeof aH.addRule == aD) {
                aH.addRule(b, f)
            }
        } else {
            if (aH && typeof aL.createTextNode != aq) {
                aH.appendChild(aL.createTextNode(b + " {" + f + "}"))
            }
        }
    }

    function ay(a, c) {
        if (!aI) {
            return
        }
        var b = c ? "visible" : "hidden";
        if (ak && aS(a)) {
            aS(a).style.visibility = b
        } else {
            az("#" + a, "visibility:" + b)
        }
    }

    function ai(b) {
        var a = /[\\\"<>\.;]/;
        var c = a.exec(b) != null;
        return c && typeof encodeURIComponent != aq ? encodeURIComponent(b) : b
    }

    var aR = function() {
        if (ah.ie && ah.win) {
            window.attachEvent("onunload", function() {
                var a = al.length;
                for (var b = 0; b < a; b++) {
                    al[b][0].detachEvent(al[b][1], al[b][2])
                }
                var d = ag.length;
                for (var c = 0; c < d; c++) {
                    aw(ag[c])
                }
                for (var e in ah) {
                    ah[e] = null
                }
                ah = null;
                for (var f in swfobject) {
                    swfobject[f] = null
                }
                swfobject = null
            })
        }
    }();
    return {
        registerObject: function(a, e, c, b) {
            if (ah.w3 && a && e) {
                var d = {};
                d.id = a;
                d.swfVersion = e;
                d.expressInstall = c;
                d.callbackFn = b;
                aG[aG.length] = d;
                ay(a, false)
            } else {
                if (b) {
                    b({
                        success: false,
                        id: a
                    })
                }
            }
        },
        getObjectById: function(a) {
            if (ah.w3) {
                return av(a)
            }
        },
        embedSWF: function(k, e, h, f, c, a, b, i, g, j) {
            var d = {
                success: false,
                id: e
            };
            if (ah.w3 && !(ah.wk && ah.wk < 312) && k && e && h && f && c) {
                ay(e, false);
                aj(function() {
                    h += "";
                    f += "";
                    var q = {};
                    if (g && typeof g === aD) {
                        for (var o in g) {
                            q[o] = g[o]
                        }
                    }
                    q.data = k;
                    q.width = h;
                    q.height = f;
                    var n = {};
                    if (i && typeof i === aD) {
                        for (var p in i) {
                            n[p] = i[p]
                        }
                    }
                    if (b && typeof b === aD) {
                        for (var l in b) {
                            if (typeof n.flashvars != aq) {
                                n.flashvars += "&" + l + "=" + b[l]
                            } else {
                                n.flashvars = l + "=" + b[l]
                            }
                        }
                    }
                    if (ao(c)) {
                        var m = aA(q, n, e);
                        if (q.id == e) {
                            ay(e, true)
                        }
                        d.success = true;
                        d.ref = m
                    } else {
                        if (a && au()) {
                            q.data = a;
                            ae(q, n, e, j);
                            return
                        } else {
                            ay(e, true)
                        }
                    }
                    if (j) {
                        j(d)
                    }
                })
            } else {
                if (j) {
                    j(d)
                }
            }
        },
        switchOffAutoHideShow: function() {
            aI = false
        },
        ua: ah,
        getFlashPlayerVersion: function() {
            return {
                major: ah.pv[0],
                minor: ah.pv[1],
                release: ah.pv[2]
            }
        },
        hasFlashPlayerVersion: ao,
        createSWF: function(a, b, c) {
            if (ah.w3) {
                return aA(a, b, c)
            } else {
                return undefined
            }
        },
        showExpressInstall: function(b, a, d, c) {
            if (ah.w3 && au()) {
                ae(b, a, d, c)
            }
        },
        removeSWF: function(a) {
            if (ah.w3) {
                aw(a)
            }
        },
        createCSS: function(b, a, c, d) {
            if (ah.w3) {
                az(b, a, c, d)
            }
        },
        addDomLoadEvent: aj,
        addLoadEvent: aC,
        getQueryParamValue: function(b) {
            var a = aL.location.search || aL.location.hash;
            if (a) {
                if (/\?/.test(a)) {
                    a = a.split("?")[1]
                }
                if (b == null) {
                    return ai(a)
                }
                var c = a.split("&");
                for (var d = 0; d < c.length; d++) {
                    if (c[d].substring(0, c[d].indexOf("=")) == b) {
                        return ai(c[d].substring((c[d].indexOf("=") + 1)))
                    }
                }
            }
            return ""
        },
        expressInstallCallback: function() {
            if (aU) {
                var a = aS(ac);
                if (a && aJ) {
                    a.parentNode.replaceChild(aJ, a);
                    if (ad) {
                        ay(ad, true);
                        if (ah.ie && ah.win) {
                            aJ.style.display = "block"
                        }
                    }
                    if (ap) {
                        ap(at)
                    }
                }
                aU = false
            }
        }
    }
}();
(function() {
    if(!('now' in Date)){
        Date.now=function(){
            var d=new Date();
            return d.getTime();
        }
    }
    if (window.WEB_SOCKET_FORCE_FLASH) {} else {
        if (window.WebSocket) {
            return
        } else {
            if (window.MozWebSocket) {
                window.WebSocket = MozWebSocket;
                return
            }
        }
    }
    var a;
    if (window.WEB_SOCKET_LOGGER) {
        a = WEB_SOCKET_LOGGER
    } else {
        if (window.console && window.console.log && window.console.error) {
            a = window.console
        } else {
            a = {
                log: function() {},
                error: function() {}
            }
        }
    }
    if (swfobject.getFlashPlayerVersion().major < 10) {
        a.error("Flash Player >= 10.0.0 is required.");
        return
    }
    if (location.protocol == "file:") {
        a.error("WARNING: web-socket-js doesn't work in file:///... URL " + "unless you set Flash Security Settings properly. " + "Open the page via Web server i.e. http://...")
    }
    window.WebSocket = function(d, e, c, g, f) {
        var b = this;
        b.__id = WebSocket.__nextId++;
        WebSocket.__instances[b.__id] = b;
        b.readyState = WebSocket.CONNECTING;
        b.bufferedAmount = 0;
        b.__events = {};
        if (!e) {
            e = []
        } else {
            if (typeof e == "string") {
                e = [e]
            }
        }
        b.__createTask = setTimeout(function() {
            WebSocket.__addTask(function() {
                b.__createTask = null;
                WebSocket.__flash.create(b.__id, d, e, c || null, g || 0, f || null)
            })
        }, 0)
    };
    WebSocket.prototype.send = function(c) {
        if (this.readyState == WebSocket.CONNECTING) {
            throw "INVALID_STATE_ERR: Web Socket connection has not been established"
        }
        var b = WebSocket.__flash.send(this.__id, encodeURIComponent(c));
        if (b < 0) {
            return true
        } else {
            this.bufferedAmount += b;
            return false
        }
    };
    WebSocket.prototype.close = function() {
        if (this.__createTask) {
            clearTimeout(this.__createTask);
            this.__createTask = null;
            this.readyState = WebSocket.CLOSED;
            return
        }
        if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {
            return
        }
        this.readyState = WebSocket.CLOSING;
        WebSocket.__flash.close(this.__id)
    };
    WebSocket.prototype.addEventListener = function(c, d, b) {
        if (!(c in this.__events)) {
            this.__events[c] = []
        }
        this.__events[c].push(d)
    };
    WebSocket.prototype.removeEventListener = function(e, f, b) {
        if (!(e in this.__events)) {
            return
        }
        var d = this.__events[e];
        for (var c = d.length - 1; c >= 0; --c) {
            if (d[c] === f) {
                d.splice(c, 1);
                break
            }
        }
    };
    WebSocket.prototype.dispatchEvent = function(e) {
        var c = this.__events[e.type] || [];
        for (var b = 0; b < c.length; ++b) {
            c[b](e)
        }
        var d = this["on" + e.type];
        if (d) {
            d.apply(this, [e])
        }
    };
    WebSocket.prototype.__handleEvent = function(d) {
        if ("readyState" in d) {
            this.readyState = d.readyState
        }
        if ("protocol" in d) {
            this.protocol = d.protocol
        }
        var b;
        if (d.type == "open" || d.type == "error") {
            b = this.__createSimpleEvent(d.type)
        } else {
            if (d.type == "close") {
                b = this.__createSimpleEvent("close");
                b.wasClean = d.wasClean ? true : false;
                b.code = d.code;
                b.reason = d.reason
            } else {
                if (d.type == "message") {
                    var c = decodeURIComponent(d.message);
                    b = this.__createMessageEvent("message", c)
                } else {
                    throw "unknown event type: " + d.type
                }
            }
        }
        this.dispatchEvent(b)
    };
    WebSocket.prototype.__createSimpleEvent = function(b) {
        if (document.createEvent && window.Event) {
            var c = document.createEvent("Event");
            c.initEvent(b, false, false);
            return c
        } else {
            return {
                type: b,
                bubbles: false,
                cancelable: false
            }
        }
    };
    WebSocket.prototype.__createMessageEvent = function(b, d) {
        if (window.MessageEvent && typeof(MessageEvent) == "function" && !window.opera) {
            return new MessageEvent("message", {
                "view": window,
                "bubbles": false,
                "cancelable": false,
                "data": d
            })
        } else {
            if (document.createEvent && window.MessageEvent && !window.opera) {
                var c = document.createEvent("MessageEvent");
                c.initMessageEvent("message", false, false, d, null, null, window, null);
                return c
            } else {
                return {
                    type: b,
                    data: d,
                    bubbles: false,
                    cancelable: false
                }
            }
        }
    };
    WebSocket.CONNECTING = 0;
    WebSocket.OPEN = 1;
    WebSocket.CLOSING = 2;
    WebSocket.CLOSED = 3;
    WebSocket.__isFlashImplementation = true;
    WebSocket.__initialized = false;
    WebSocket.__flash = null;
    WebSocket.__instances = {};
    WebSocket.__tasks = [];
    WebSocket.__nextId = 0;
    WebSocket.loadFlashPolicyFile = function(endpoint) {
        WebSocket.__addTask(function() {
            WebSocket.__flash.loadManualPolicyFile("xmlsocket://" + endpoint + ":8300")
        })
    };
    WebSocket.WEB_SOCKET_DEBUG = function(isdebug) {
        window.WEB_SOCKET_DEBUG = !! isdebug;
    };
    WebSocket.Serialize = function(c, b) {
        return WebSocket.__flash.proBufEncode(c, b)
    };
    WebSocket.deSerialize = function(c, b) {
        return WebSocket.__flash.proBufDecode(c, b)
    };
    WebSocket.__initialize = function() {
        if (typeof window != "undefined") {
            window.WEB_SOCKET_SWF_LOCATION = "http://res.websdk.rongcloud.net/WebSocketMainInsecure-0.2.swf";
        }
        if (WebSocket.__initialized) {
            return
        }
        WebSocket.__initialized = true;
        if (WebSocket.__swfLocation) {
            window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation
        }
        if (!window.WEB_SOCKET_SWF_LOCATION) {
            a.error("[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf");
            return
        }
        if (!window.WEB_SOCKET_SUPPRESS_CROSS_DOMAIN_SWF_ERROR && !WEB_SOCKET_SWF_LOCATION.match(/(^|\/)WebSocketMainInsecure-0\.2\.swf(\?.*)?$/) && WEB_SOCKET_SWF_LOCATION.match(/^\w+:\/\/([^\/]+)/)) {
            var f = RegExp.$1;
            if (location.host != f) {
                a.error("[WebSocket] You must host HTML and WebSocketMain.swf in the same host " + "('" + location.host + "' != '" + f + "'). " + "See also 'How to host HTML file and SWF file in different domains' section " + "in README.md. If you use WebSocketMainInsecure.swf, you can suppress this message " + "by WEB_SOCKET_SUPPRESS_CROSS_DOMAIN_SWF_ERROR = true;")
            }
        }
        var b = document.createElement("div");
        b.id = "webSocketContainer";
        b.style.position = "absolute";
        if (WebSocket.__isFlashLite()) {
            b.style.left = "0px";
            b.style.top = "0px"
        } else {
            b.style.left = "-100px";
            b.style.top = "-100px"
        }
        var c = document.createElement("div");
        c.id = "webSocketFlash";
        b.appendChild(c);
        document.body.appendChild(b);
        swfobject.embedSWF(WEB_SOCKET_SWF_LOCATION, "webSocketFlash", "1", "1", "10.0.0", null, null, {
            hasPriority: true,
            swliveconnect: true,
            allowScriptAccess: "always"
        }, null, function(g) {
            if (!g.success) {
                a.error("[WebSocket] swfobject.embedSWF failed")
            }
        })
    };
    WebSocket.__onFlashInitialized = function() {
        setTimeout(function() {
            WebSocket.__flash = document.getElementById("webSocketFlash");
            WebSocket.__flash.setCallerUrl(location.href);
            WebSocket.__flash.setDebug( !! window.WEB_SOCKET_DEBUG);
            for (var b = 0; b < WebSocket.__tasks.length; ++b) {
                WebSocket.__tasks[b]()
            }
            WebSocket.__tasks = []
        }, 0)
    };
    WebSocket.__onFlashEvent = function() {
        setTimeout(function() {
            try {
                var c = WebSocket.__flash.receiveEvents();
                for (var b = 0; b < c.length; ++b) {
                    WebSocket.__instances[c[b].webSocketId].__handleEvent(c[b])
                }
            } catch (d) {
                a.error(d)
            }
        }, 0);
        return true
    };
    WebSocket.__log = function(b) {
        a.log(decodeURIComponent(b))
    };
    WebSocket.__error = function(b) {
        a.error(decodeURIComponent(b))
    };
    WebSocket.__addTask = function(b) {
        if (WebSocket.__flash) {
            b()
        } else {
            WebSocket.__tasks.push(b)
        }
    };
    WebSocket.__isFlashLite = function() {
        if (!window.navigator || !window.navigator.mimeTypes) {
            return false
        }
        var b = window.navigator.mimeTypes["application/x-shockwave-flash"];
        if (!b || !b.enabledPlugin || !b.enabledPlugin.filename) {
            return false
        }
        return b.enabledPlugin.filename.match(/flashlite/i) ? true : false
    };
    if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {
        swfobject.addDomLoadEvent(function() {
            WebSocket.__initialize()
        })
    }
})();
(function(d) {
    function convertInt64(i) {
        var stamp = parseInt(i).toString(16);
        if (stamp.length != 11) return "0";
        var low = stamp.slice(stamp.length - 8),
            high = stamp.slice(0, 3);
        return high + "" + low;
    }

    function convertBinary(str) {
        if (window.RongBinaryHelper) {
            return window.RongBinaryHelper.writeUTF(str, true).toString();
        }
        return "";
    }

    var e = {
        NotifyMsg: function() {
            var a = {};
            this.setType = function(b) {
                a.type = b
            };
            this.setTime = function(b) {
                a.time = convertInt64(b);
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("NotifyMsg", a)
            }
        },
        SyncRequestMsg: function() {
            var a = {};
            this.setSyncTime = function(b) {
                a.syncTime = convertInt64(b);
            };
            this.setIspolling = function(b) {
                a.ispolling = !! b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("SyncRequestMsg", a)
            }
        },
        UpStreamMessage: function() {
            var a = {};
            this.setSessionId = function(b) {
                a.sessionId = b
            };
            this.setClassname = function(b) {
                a.classname = b
            };
            this.setContent = function(b) {
                if (b) a.content = convertBinary(b);
            };
            this.setPushText = function(b) {
                a.pushText = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("UpStreamMessage", a)
            }
        },
        DownStreamMessages: function() {
            var a = {};
            this.setList = function(b) {
                a.list = b
            };
            this.setSyncTime = function(b) {
                a.syncTime = convertInt64(b);
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("DownStreamMessages", a)
            }
        },
        DownStreamMessage: function() {
            var a = {};
            this.setFromUserId = function(b) {
                a.fromUserId = b
            };
            this.setType = function(b) {
                a.type = b
            };
            this.setGroupId = function(b) {
                a.groupId = b
            };
            this.setClassname = function(b) {
                a.classname = b
            };
            this.setContent = function(b) {
                if (b) a.content = convertBinary(b);
            };
            this.setDataTime = function(b) {
                a.dataTime = convertInt64(b);
            };
            this.setStatus = function(b) {
                a.status = convertInt64(b);
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("DownStreamMessage", a)
            }
        },
        CreateDiscussionInput: function() {
            var a = {};
            this.setName = function(b) {
                a.name = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("CreateDiscussionInput", a)
            }
        },
        CreateDiscussionOutput: function() {
            var a = {};
            this.setId = function(b) {
                a.id = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("CreateDiscussionOutput", a)
            }
        },
        ChannelInvitationInput: function() {
            var a = {};
            this.setUsers = function(b) {
                a.users = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("ChannelInvitationInput", a)
            }
        },
        LeaveChannelInput: function() {
            var a = {};
            this.setNothing = function(b) {
                a.nothing = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("LeaveChannelInput", a)
            }
        },
        ChannelEvictionInput: function() {
            var a = {};
            this.setUser = function(b) {
                a.user = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("ChannelEvictionInput", a)
            }
        },
        RenameChannelInput: function() {
            var a = {};
            this.setName = function(b) {
                a.name = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("RenameChannelInput", a)
            }
        },
        ChannelInfoInput: function() {
            var a = {};
            this.setNothing = function(b) {
                a.nothing = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("ChannelInfoInput", a)
            }
        },
        ChannelInfoOutput: function() {
            var a = {};
            this.setType = function(b) {
                a.type = b
            };
            this.setChannelId = function(b) {
                a.channelId = b
            };
            this.setChannelName = function(b) {
                a.channelName = b
            };
            this.setAdminUserId = function(b) {
                a.adminUserId = b
            };
            this.setFirstTenUserIds = function(b) {
                a.firstTenUserIds = b
            };
            this.setOpenStatus = function(b) {
                a.openStatus = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("ChannelInfoOutput", a)
            }
        },
        ChannelInfosInput: function() {
            var a = {};
            this.setPage = function(b) {
                a.page = b
            };
            this.setNumber = function(b) {
                a.number = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("ChannelInfosInput", a)
            }
        },
        ChannelInfosOutput: function() {
            var a = {};
            this.setChannels = function(b) {
                a.channels = b
            };
            this.setTotal = function(b) {
                a.total = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("ChannelInfosOutput", a)
            }
        },
        MemberInfo: function() {
            var a = {};
            this.setUserId = function(b) {
                a.userId = b
            };
            this.setUserName = function(b) {
                a.userName = b
            };
            this.setUserPortrait = function(b) {
                a.userPortrait = b
            };
            this.setExtension = function(b) {
                a.extension = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("MemberInfo", a)
            }
        },
        GroupMembersInput: function() {
            var a = {};
            this.setPage = function(b) {
                a.page = b
            };
            this.setNumber = function(b) {
                a.number = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GroupMembersInput", a)
            }
        },
        GroupMembersOutput: function() {
            var a = {};
            this.setMembers = function(b) {
                a.members = b
            };
            this.setTotal = function(b) {
                a.total = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GroupMembersOutput", a)
            }
        },
        GetUserInfoInput: function() {
            var a = {};
            this.setNothing = function(b) {
                a.nothing = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GetUserInfoInput", a)
            }
        },
        GetUserInfoOutput: function() {
            var a = {};
            this.setUserId = function(b) {
                a.userId = b
            };
            this.setUserName = function(b) {
                a.userName = b
            };
            this.setUserPortrait = function(b) {
                a.userPortrait = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GetUserInfoOutput", a)
            }
        },
        GetSessionIdInput: function() {
            var a = {};
            this.setNothing = function(b) {
                a.nothing = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GetSessionIdInput", a)
            }
        },
        GetSessionIdOutput: function() {
            var a = {};
            this.setSessionId = function(b) {
                a.sessionId = b
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GetSessionIdOutput", a)
            }
        },
        GetQNupTokenInput: function() {
            var a = {};
            this.setType = function(b) {
                a.type = b;
            }
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GetQNupTokenInput", a)
            }
        },
        GetQNupTokenOutput: function() {
            var a = {};
            this.setDeadline = function(b) {
                a.deadline = convertInt64(b);
            };
            this.setToken = function(b) {
                a.token = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GetQNupTokenOutput", a)
            }
        },
        GetQNdownloadUrlInput: function() {
            var a = {};
            this.setType = function(b) {
                a.type = b;
            };
            this.setKey = function(b) {
                a.key = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GetQNdownloadUrlInput", a)
            }
        },
        GetQNdownloadUrlOutput: function() {
            var a = {};
            this.setDownloadUrl = function(b) {
                a.downloadUrl = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GetQNdownloadUrlOutput", a)
            }
        },
        Add2BlackListInput: function() {
            var a = {};
            this.setUserId = function(b) {
                a.userId = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("Add2BlackListInput", a)
            }
        },
        RemoveFromBlackListInput: function() {
            var a = {};
            this.setUserId = function(b) {
                a.userId = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("RemoveFromBlackListInput", a)
            }
        },
        QueryBlackListInput: function() {
            var a = {};
            this.setNothing = function(b) {
                a.nothing = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("QueryBlackListInput", a)
            }
        },
        QueryBlackListOutput: function() {
            var a = {};
            this.setUserIds = function(b) {
                a.userIds = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("QueryBlackListOutput", a)
            }
        },
        BlackListStatusInput: function() {
            var a = {};
            this.setUserId = function(b) {
                a.userId = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("BlackListStatusInput", a)
            }
        },
        BlockPushInput: function() {
            var a = {};
            this.setBlockeeId = function(b) {
                a.blockeeId = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("BlockPushInput", a)
            }
        },
        ModifyPermissionInput: function() {
            var a = {};
            this.setOpenStatus = function(b) {
                a.openStatus = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("ModifyPermissionInput", a)
            }
        },
        GroupInput: function() {
            var a = {};
            this.setGroupInfo = function(b) {
                a. groupInfo= b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GroupInput", a)
            }
        },
        GroupOutput: function() {
            var a = {};
            this.setNothing = function(b) {
                a.nothing = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GroupOutput", a)
            }
        },
        GroupInfo: function() {
            var a = {};
            this.setId = function(b) {
                a.id = b;
            };
            this.setName = function(b) {
                a.name = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GroupInfo", a)
            }
        },
        GroupHashInput: function() {
            var a = {};
            this.setUserId = function(b) {
                a.userId = b;
            };
            this.setGroupHashCode = function(b) {
                a.groupHashCode = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GroupHashInput", a)
            }
        },
        GroupHashOutput: function() {
            var a = {};
            this.setResult = function(b) {
                a.result = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("GroupHashOutput", a)
            }
        },
        ChrmInput: function() {
            var a = {};
            this.setNothing = function(b) {
                a.nothing = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("ChrmInput", a)
            }
        },
        ChrmOutput: function() {
            var a = {};
            this.setNothing = function(b) {
                a.nothing = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("ChrmOutput", a)
            }
        },
        ChrmPullMsg: function() {
            var a = {};
            this.setSyncTime = function(b) {
                a.syncTime =convertInt64(b);
            };
            this.setCount = function(b) {
                a.count = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("ChrmPullMsg", a)
            }
        },
        RelationsInput:function(){
            var a={};
            this.setNothing=function(b){
                a.nothing = b;
            }
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("RelationsInput", a)
            }
        },
        RelationsOutput:function(){
            var a={};
            this.setUserIds = function(b) {
                a.userIds = b;
            };
            this.toArrayBuffer = function() {
                return WebSocket.Serialize("RelationsOutput", a)
            }
        }
    };
    for (var f in e) {
        e[f].decode = (function(a) {
            return function(b) {
                var temp = WebSocket.deSerialize(a, b),
                    back = {};
                for (var i in temp) {
                    back["get" + i.charAt(0).toUpperCase() + i.slice(1)] = (function(x) {
                        return function() {
                            return x;
                        }
                    })(temp[i])
                }
                return back;
            }
        })(f)
    }
    d.Modules = e;
})(window);
if (RongIMClient.connect.token) {
    RongIMClient.getInstance().connect(RongIMClient.connect.token, RongIMClient.connect.callback);
}
